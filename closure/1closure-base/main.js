"use strict";

// ==================================================
// ВАРИАНТ "САМЫЙ ГРОМОЗДКИЙ"
// ==================================================
// Внешняя функция
function outer() {
  // Переменная в пространстве имён внешней функции
  let scope = "Переменная внешней функции";

  // Внешняя функция возвращает КОД внутренней функции
  // Внутренняя функция – замыкание
  return function inner() {
    // Внутренняя функция возвращает переменную "scope",
    // ... значение которой берёт из внешней функции
    return scope;
  }

  // Вызов внутренней функции, которая возвращает переменную "scope", 
  // ... значение которой берёт из внешней функции
  inner();
}

// Переменной присваивается КОД возвращаемой внутренней
let func = outer();

// Каждый запуск – вызов кода внутренней функции
func();               // Результат: "Переменная внешней функции"
func();               // Результат: "Переменная внешней функции"




// ======================================================
// ВАРИАНТ "СРЕДНИЙ"
// - return перед внутренней функции
// ======================================================
// Внешняя функция
function outer() {
  // Переменная в пространстве имён внешней функции
  let scope = "Переменная внешней функции";

  // Внешняя функция возвращает КОД внутренней функции
  // Внутренняя функция – замыкание
  return function inner() {
    // Внутренняя функция возвращает переменную "scope",
    // ... значение которой берёт из внешней функции
    return scope;
  }
}

// Переменной присваивается КОД возвращаемой внутренней
let func = outer();

// Каждый запуск – вызов кода внутренней функции
func();               // Результат: "Переменная внешней функции"
func();               // Результат: "Переменная внешней функции"




// ======================================================
// ВАРИАНТ "КОМПАКТНЫЙ"
// - внешняя функция iife присваивается переменной
// - return перед внутренней функцией
// ======================================================
// Внешняя функция - это IIFE, возвращаемое значение которой сразу присваивается переменной
let func = (function() {
  // Переменная в пространстве имён внешней функции
  let scope = "Переменная внешней функции";

  // Внешняя функция возвращает КОД внутренней функции
  // Внутренняя функция – замыкание
  return function inner() {
    // Внутренняя функция возвращает переменную "scope",
    // ... значение которой берёт из внешней функции
    return scope;
  }
})();

// Каждый запуск – вызов кода внутренней функции
func();               // Результат: "Переменная внешней функции"
func();               // Результат: "Переменная внешней функции"