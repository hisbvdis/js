console.log( power(2, 2) );
console.log( power(2, 3) );
console.log( power(2, 4) );
console.log( power(2, 5) );
console.log( power(2, 6) );
console.log( power(2, 7) );
console.log( power(2, 8) );
console.log( power(2, 9) );
console.log( power(2, 10) );



// ===============================
// Решение с помощью рекурсии
// ===============================
// Подготовка
function power(x, n) {
  // 3. Определение простейшего случая
  // 3.1. Простейший случай - это x¹ (при котором "x" умножатся на 1)
  // 3.2. Значит, если "n" равняется  1, вернуть само значение "x"
  if (n === 1) {
    return x;
  }
  
  // 4. В ином случае (если "n" НЕ равняется 1)
  // 4.1. Вызвать эту же функцию с упрощённым значением
  // 4.2. Умножить вызов на "x"
  else {
    return x * power(x, n - 1);
  }
}




// ===============================
// Решение с помощью цикла
// ===============================
function powerLoop(x, n) {
  // 1. Начальное значение
  let initial = 1;

  // 2. Повторение действия через цикл
  for (let i = 0; i < n; i++) {
    // 2.1. После первого умножения на "x", переменная "initial" = "x"
    // 2.2. Дальше каждое умножение на "x" - это умножение на себя
    initial = initial * x;
  }

  return initial;
}